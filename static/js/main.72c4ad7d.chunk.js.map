{"version":3,"sources":["methods.js","App.js","serviceWorker.js","index.js"],"names":["generateCars","params","add","from","to","lanes","i","getNumberInRange","route","j","push","id","carI","target_velocity","max_acceleration","target_deceleration","min_distance","target_headway","politeness","start","lane","distance","gridSize","min","max","round","Math","ceil","floor","random","module","exports","generate","output","time_steps","junctions","roads","cars","x","gridWidth","y","gridHeight","junction","signals","dir","time","junction1","junction2","limit","car","NumberInput","props","react_default","a","createElement","formGroup","label","labelInfo","info","labelFor","numericInput","placeholder","stepSize","value","state","onValueChange","number","onChange","RangeInput","rangeSlider","labelStepSize","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","maxAccelerationMin","maxAccelerationMax","roadsPerJunctionMin","roadsPerJunctionMax","signalTimeMin","signalTimeMax","carsPerRoadMin","carsPerRoadMax","targetVelocityMin","targetVelocityMax","targetDecelerationMin","targetDecelerationMax","minDistanceMin","minDistanceMax","targetHeadwayMin","targetHeadwayMax","politenessMin","politenessMax","routeLengthMin","routeLengthMax","limitMin","limitMax","lanesPerRoadMin","lanesPerRoadMax","_this2","val","setState","objectSpread","defineProperty","style","margin","html","undefined","textArea","large","fill","inputRef","ref","parameterBoxRef","JSON","parse","e","stringify","buttons","icon","intent","text","onClick","controls","pretty","checked","collapse","isOpen","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.72c4ad7d.chunk.js","sourcesContent":["function generate(params) {\r\n    params.carI = 0;\r\n    let output = {\r\n        time_steps: 1,\r\n        junctions: [],\r\n        roads: [],\r\n        cars: []\r\n    };\r\n\r\n    for (let x = 0; x < params.gridWidth; x++) {\r\n        for (let y = 0; y < params.gridHeight; y++) {\r\n            const junction = {\r\n                id: y * params.gridWidth + x,\r\n                x: x * params.gridSize,\r\n                y: y * params.gridSize,\r\n                signals: []\r\n            };\r\n\r\n            for (let i = 0; i < 4; i++) {\r\n                junction.signals.push({\r\n                    dir: i,\r\n                    time: getNumberInRange(params['signalTimeMin'], params['signalTimeMax'], true)\r\n                })\r\n            }\r\n\r\n            output.junctions.push(junction);\r\n\r\n            if (x < params.gridWidth - 1) {\r\n                // If not on right edge, connect one street to junction below and one street to junction to the right\r\n                const lanes = getNumberInRange(params['lanesPerRoadMin'], params['lanesPerRoadMax'], true);\r\n                output.roads.push({\r\n                    junction1: y * params.gridWidth + x,\r\n                    junction2: y * params.gridWidth + x + 1,\r\n                    lanes: lanes,\r\n                    limit: getNumberInRange(params['limitMin'], params['limitMax'], true)\r\n                });\r\n                generateCars(params, car => output.cars.push(car), y * params.gridWidth + x, y * params.gridWidth + x + 1, lanes);\r\n                generateCars(params, car => output.cars.push(car), y * params.gridWidth + x + 1, y * params.gridWidth + x, lanes);\r\n            }\r\n            if (y < params.gridHeight - 1) {\r\n                // If not on bottom edge, connect one street to junction below and one street to junction to the right\r\n                const lanes = getNumberInRange(params['lanesPerRoadMin'], params['lanesPerRoadMax'], true);\r\n                output.roads.push({\r\n                    junction1: y * params.gridWidth + x,\r\n                    junction2: y * params.gridWidth + x + params.gridWidth,\r\n                    lanes: lanes,\r\n                    limit: getNumberInRange(params['limitMin'], params['limitMax'], true)\r\n                });\r\n                generateCars(params, car => output.cars.push(car), y * params.gridWidth + x, y * params.gridWidth + x + params.gridWidth, lanes);\r\n                generateCars(params, car => output.cars.push(car), y * params.gridWidth + x + params.gridWidth, y * params.gridWidth + x, lanes);\r\n            }\r\n        }\r\n    }\r\n\r\n    return output;\r\n}\r\n\r\nfunction generateCars(params, add, from, to, lanes) {\r\n    for (let i = 0; i < getNumberInRange(params['carsPerRoadMin'], params['carsPerRoadMax'], true); i++) {\r\n        const route = [];\r\n        for (let j = 0; j < getNumberInRange(params['routeLengthMin'], params['routeLengthMax'], true); j++) {\r\n            route.push(getNumberInRange(0, 3, true));\r\n        }\r\n\r\n        add({\r\n            id: params.carI++,\r\n            target_velocity: getNumberInRange(params['targetVelocityMin'], params['targetVelocityMax'], true),\r\n            max_acceleration: getNumberInRange(params['maxAccelerationMin'], params['maxAccelerationMax'], true),\r\n            target_deceleration: getNumberInRange(params['targetDecelerationMin'], params['targetDecelerationMax'], true),\r\n            min_distance: getNumberInRange(params['minDistanceMin'], params['minDistanceMax'], true),\r\n            target_headway: getNumberInRange(params['targetHeadwayMin'], params['targetHeadwayMax'], true),\r\n            politeness: getNumberInRange(params['politenessMin'], params['politenessMax'], false),\r\n            start: {\r\n                from, to,\r\n                lane: getNumberInRange(0, lanes - 1, true),\r\n                distance: getNumberInRange(0, params.gridSize * 100 - 35 / 2, false)\r\n            },\r\n            route\r\n        });\r\n    }\r\n}\r\n\r\n\r\nfunction getNumberInRange(min, max, round) {\r\n    if (round) {\r\n        min = Math.ceil(min);\r\n        max = Math.floor(max);\r\n        return Math.floor(Math.random() * (max - min + 1)) + min;\r\n    } else {\r\n        return Math.random() * (max - min) + min;\r\n    }\r\n}\r\n\r\nmodule.exports = {generate, getNumberInRange};","import React, {Component} from 'react';\nimport './App.css';\nimport '@blueprintjs/icons/lib/css/blueprint-icons.css';\nimport '@blueprintjs/core/lib/css/blueprint.css';\nimport {\n    Button,\n    Checkbox,\n    Collapse,\n    FormGroup,\n    H1,\n    NumericInput, Pre,\n    RangeSlider,\n    TextArea\n} from \"@blueprintjs/core\";\nimport {generate} from \"./methods\";\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n\n        const defaultParameters = {\"maxAccelerationMin\":1,\"maxAccelerationMax\":16,\"gridWidth\":2,\"gridHeight\":1,\"gridSize\":1,\"roadsPerJunctionMin\":1,\"roadsPerJunctionMax\":4,\"signalTimeMin\":5,\"signalTimeMax\":15,\"carsPerRoadMin\":1,\"carsPerRoadMax\":5,\"targetVelocityMin\":71,\"targetVelocityMax\":105,\"targetDecelerationMin\":1,\"targetDecelerationMax\":15,\"minDistanceMin\":1,\"minDistanceMax\":6,\"targetHeadwayMin\":1,\"targetHeadwayMax\":6,\"politenessMin\":0.25,\"politenessMax\":0.75,\"routeLengthMin\":1,\"routeLengthMax\":4,\"limitMin\":60,\"limitMax\":180,\"lanesPerRoadMin\":1,\"lanesPerRoadMax\":3};\n\n        this.state = {params: defaultParameters};\n    }\n\n    render() {\n        const onChange = (id, val) => {\n            this.setState({\n                params: {...this.state.params, [id]: val}\n            });\n        };\n\n        return (\n            <div style={{\n                margin: '2em 20em'\n            }}>\n                <H1>Grid size</H1>\n                <NumberInput\n                    id={\"gridWidth\"} label={\"Width of the grid\"} info={undefined} placeholder={1}\n                    min={1} max={undefined} stepSize={1}\n                    state={this.state.params} onChange={onChange}\n                />\n                <NumberInput\n                    id={\"gridHeight\"} label={\"Height of the grid\"} info={undefined} placeholder={1}\n                    min={1} max={undefined} stepSize={1}\n                    state={this.state.params} onChange={onChange}\n                />\n                <NumberInput\n                    id={\"gridSize\"} label={\"Distance between junctions * 100\"} info={undefined} placeholder={1}\n                    min={1} max={undefined} stepSize={.1}\n                    state={this.state.params} onChange={onChange}\n                />\n\n                <H1>Junctions</H1>\n                {/*<RangeInput\n                    id={\"roadsPerJunction\"} label={\"Connected roads per junction\"} info={undefined}\n                    min={1} max={4} stepSize={1}\n                    state={this.state} onChange={onChange}\n                />*/}\n                <RangeInput\n                    id={\"signalTime\"} label={\"Time between signals\"} info={undefined}\n                    min={0} max={50} stepSize={5}\n                    state={this.state.params} onChange={onChange}\n                />\n\n                <H1>Roads</H1>\n                <RangeInput\n                    id={\"lanesPerRoad\"} label={\"Lanes per road\"} info={undefined}\n                    min={1} max={3} stepSize={1}\n                    state={this.state.params} onChange={onChange}\n                />\n                <RangeInput\n                    id={\"limit\"} label={\"Limit\"} info={undefined}\n                    min={0} max={200} stepSize={10}\n                    state={this.state.params} onChange={onChange}\n                />\n                <RangeInput\n                    id={\"carsPerRoad\"} label={\"Cars per road\"} info={undefined}\n                    min={1} max={20} stepSize={1}\n                    state={this.state.params} onChange={onChange}\n                />\n\n                <H1>Cars</H1>\n                <RangeInput\n                    id={\"targetVelocity\"} label={\"Target Velocity\"} info={undefined}\n                    min={1} max={300} stepSize={5}\n                    state={this.state.params} onChange={onChange}\n                />\n                <RangeInput\n                    id={\"maxAcceleration\"} label={\"Maximum acceleration\"} info={undefined}\n                    min={1} max={300} stepSize={5}\n                    state={this.state.params} onChange={onChange}\n                />\n                <RangeInput\n                    id={\"targetDeceleration\"} label={\"Target Deceleration\"} info={undefined}\n                    min={1} max={300} stepSize={5}\n                    state={this.state.params} onChange={onChange}\n                />\n                <RangeInput\n                    id={\"minDistance\"} label={\"Minimum Distance\"} info={undefined}\n                    min={1} max={20} stepSize={1}\n                    state={this.state.params} onChange={onChange}\n                />\n                <RangeInput\n                    id={\"targetHeadway\"} label={\"Target Headway\"} info={undefined}\n                    min={1} max={20} stepSize={1}\n                    state={this.state.params} onChange={onChange}\n                />\n                <RangeInput\n                    id={\"politeness\"} label={\"Politeness\"} info={undefined}\n                    min={0} max={1} stepSize={.05}\n                    state={this.state.params} onChange={onChange}\n                />\n                <RangeInput\n                    id={\"routeLength\"} label={\"Route Length\"} info={undefined}\n                    min={1} max={20} stepSize={1}\n                    state={this.state.params} onChange={onChange}\n                />\n\n                <H1>Parameters</H1>\n                <TextArea\n                    large={true}\n                    fill={true}\n                    inputRef={ref => this.parameterBoxRef = ref}\n                    onChange={() => {\n                        try {\n                            const params = JSON.parse(this.parameterBoxRef.value);\n                            this.setState({params});\n                        } catch (e) {\n                        }\n                    }}\n                    value={JSON.stringify(this.state.params, 4)}\n                />\n\n                <H1>Generate</H1>\n                <Button icon=\"chevron-right\" intent={\"primary\"} text={\"Generate\"} onClick={() => this.setState({output: generate(this.state.params)})} />\n                <Checkbox label={'Pretty print'} onChange={() => this.setState({pretty: !this.state.pretty})} checked={this.state.pretty}/>\n\n                <Collapse isOpen={!!this.state.output}>\n                    {\n                        this.state.pretty\n                            ? <Pre>{JSON.stringify(this.state.output, undefined, 4)}</Pre>\n                            : <TextArea large={true} fill={true} value={JSON.stringify(this.state.output)}/>\n                    }\n                </Collapse>\n            </div>\n        );\n    }\n\n}\n\n\nfunction NumberInput(props) {\n    return (\n        <FormGroup\n            label={props.label}\n            labelInfo={props.info}\n            labelFor={props.id}\n        >\n            <NumericInput\n                id={props.id}\n                placeholder={props.placeholder}\n                min={props.min}\n                stepSize={props.stepSize}\n                max={props.max}\n                value={props.state[props.id]}\n                onValueChange={number => props.onChange(props.id, number)}\n            />\n        </FormGroup>\n    );\n}\n\nfunction RangeInput(props) {\n    const [min, max] = [props.state[props.id + 'Min'] || props.min, props.state[props.id + 'Max'] || props.max];\n    return (\n        <FormGroup\n            label={props.label}\n            labelInfo={props.info}\n            labelFor={props.id}\n        >\n            <RangeSlider\n                id={props.id}\n                value={[min, max]}\n                stepSize={props.stepSize}\n                labelStepSize={(props.max - props.min) / props.stepSize < 15 ? props.stepSize : (props.max - props.min) / 20}\n                min={props.min}\n                max={props.max}\n                onChange={value => {\n                    props.onChange(props.id + 'Min', value[0]);\n                    props.onChange(props.id + 'Max', value[1]);\n                }}\n            />\n        </FormGroup>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}