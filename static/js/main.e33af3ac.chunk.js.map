{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["getNumberInRange","min","max","round","Math","ceil","floor","random","NumberInput","props","react_default","a","createElement","formGroup","label","labelInfo","info","labelFor","id","numericInput","placeholder","stepSize","value","state","onValueChange","number","onChange","RangeInput","rangeSlider","labelStepSize","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","params","maxAccelerationMin","maxAccelerationMax","gridWidth","gridHeight","gridSize","roadsPerJunctionMin","roadsPerJunctionMax","signalCountMin","signalCountMax","signalTimeMin","signalTimeMax","carsPerRoadMin","carsPerRoadMax","targetVelocityMin","targetVelocityMax","targetDecelerationMin","targetDecelerationMax","minDistanceMin","minDistanceMax","targetHeadwayMin","targetHeadwayMax","politenessMin","politenessMax","routeLengthMin","routeLengthMax","limitMin","limitMax","lanesPerRoadMin","lanesPerRoadMax","_this2","val","setState","objectSpread","defineProperty","style","margin","html","undefined","textArea","large","fill","inputRef","ref","parameterBoxRef","JSON","parse","e","stringify","buttons","icon","intent","text","onClick","generate","controls","pretty","checked","collapse","isOpen","output","logMessage","carI","time_steps","junctions","roads","cars","x","y","junction","signals","i","push","dir","time","lanes","junction1","junction2","limit","generateCars","car","add","from","to","route","j","target_velocity","max_acceleration","target_deceleration","min_distance","target_headway","politeness","start","lane","distance","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e33af3ac.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport './App.css';\nimport '@blueprintjs/icons/lib/css/blueprint-icons.css';\nimport '@blueprintjs/core/lib/css/blueprint.css';\nimport {\n    Button,\n    Checkbox,\n    Collapse,\n    FormGroup,\n    H1,\n    InputGroup,\n    NumericInput, Pre,\n    RangeSlider,\n    TextArea\n} from \"@blueprintjs/core\";\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n\n        const defaultParameters = {\"maxAccelerationMin\":1,\"maxAccelerationMax\":16,\"gridWidth\":2,\"gridHeight\":1,\"gridSize\":1,\"roadsPerJunctionMin\":1,\"roadsPerJunctionMax\":4,\"signalCountMin\":1,\"signalCountMax\":4,\"signalTimeMin\":5,\"signalTimeMax\":15,\"carsPerRoadMin\":1,\"carsPerRoadMax\":5,\"targetVelocityMin\":71,\"targetVelocityMax\":105,\"targetDecelerationMin\":1,\"targetDecelerationMax\":15,\"minDistanceMin\":1,\"minDistanceMax\":6,\"targetHeadwayMin\":1,\"targetHeadwayMax\":6,\"politenessMin\":0.25,\"politenessMax\":0.75,\"routeLengthMin\":1,\"routeLengthMax\":4,\"limitMin\":60,\"limitMax\":180,\"lanesPerRoadMin\":1,\"lanesPerRoadMax\":3};\n\n        this.state = {params: defaultParameters};\n    }\n\n    render() {\n        const onChange = (id, val) => {\n            this.setState({\n                params: {...this.state.params, [id]: val}\n            });\n        };\n\n        return (\n            <div style={{\n                margin: '2em 20em'\n            }}>\n                <H1>Grid size</H1>\n                <NumberInput\n                    id={\"gridWidth\"} label={\"Width of the grid\"} info={undefined} placeholder={1}\n                    min={1} max={undefined} stepSize={1}\n                    state={this.state.params} onChange={onChange}\n                />\n                <NumberInput\n                    id={\"gridHeight\"} label={\"Height of the grid\"} info={undefined} placeholder={1}\n                    min={1} max={undefined} stepSize={1}\n                    state={this.state.params} onChange={onChange}\n                />\n                <NumberInput\n                    id={\"gridSize\"} label={\"Distance between junctions * 100\"} info={undefined} placeholder={1}\n                    min={1} max={undefined} stepSize={.1}\n                    state={this.state.params} onChange={onChange}\n                />\n\n                <H1>Junctions</H1>\n                {/*<RangeInput\n                    id={\"roadsPerJunction\"} label={\"Connected roads per junction\"} info={undefined}\n                    min={1} max={4} stepSize={1}\n                    state={this.state} onChange={onChange}\n                />*/}\n                <RangeInput\n                    id={\"signalCount\"} label={\"Amount of signals\"} info={undefined}\n                    min={1} max={20} stepSize={1}\n                    state={this.state.params} onChange={onChange}\n                />\n                <RangeInput\n                    id={\"signalTime\"} label={\"Time between signals\"} info={undefined}\n                    min={0} max={50} stepSize={5}\n                    state={this.state.params} onChange={onChange}\n                />\n\n                <H1>Roads</H1>\n                <RangeInput\n                    id={\"lanesPerRoad\"} label={\"Lanes per road\"} info={undefined}\n                    min={1} max={3} stepSize={1}\n                    state={this.state.params} onChange={onChange}\n                />\n                <RangeInput\n                    id={\"limit\"} label={\"Limit\"} info={undefined}\n                    min={0} max={200} stepSize={10}\n                    state={this.state.params} onChange={onChange}\n                />\n                <RangeInput\n                    id={\"carsPerRoad\"} label={\"Cars per road\"} info={undefined}\n                    min={1} max={20} stepSize={1}\n                    state={this.state.params} onChange={onChange}\n                />\n\n                <H1>Cars</H1>\n                <RangeInput\n                    id={\"targetVelocity\"} label={\"Target Velocity\"} info={undefined}\n                    min={1} max={300} stepSize={5}\n                    state={this.state.params} onChange={onChange}\n                />\n                <RangeInput\n                    id={\"maxAcceleration\"} label={\"Maximum acceleration\"} info={undefined}\n                    min={1} max={300} stepSize={5}\n                    state={this.state.params} onChange={onChange}\n                />\n                <RangeInput\n                    id={\"targetDeceleration\"} label={\"Target Deceleration\"} info={undefined}\n                    min={1} max={300} stepSize={5}\n                    state={this.state.params} onChange={onChange}\n                />\n                <RangeInput\n                    id={\"minDistance\"} label={\"Minimum Distance\"} info={undefined}\n                    min={1} max={20} stepSize={1}\n                    state={this.state.params} onChange={onChange}\n                />\n                <RangeInput\n                    id={\"targetHeadway\"} label={\"Target Headway\"} info={undefined}\n                    min={1} max={20} stepSize={1}\n                    state={this.state.params} onChange={onChange}\n                />\n                <RangeInput\n                    id={\"politeness\"} label={\"Politeness\"} info={undefined}\n                    min={0} max={1} stepSize={.05}\n                    state={this.state.params} onChange={onChange}\n                />\n                <RangeInput\n                    id={\"routeLength\"} label={\"Route Length\"} info={undefined}\n                    min={1} max={20} stepSize={1}\n                    state={this.state.params} onChange={onChange}\n                />\n\n                <H1>Parameters</H1>\n                <TextArea\n                    large={true}\n                    fill={true}\n                    inputRef={ref => this.parameterBoxRef = ref}\n                    onChange={() => {\n                        try {\n                            const params = JSON.parse(this.parameterBoxRef.value);\n                            this.setState({params});\n                        } catch (e) {\n                        }\n                    }}\n                    value={JSON.stringify(this.state.params, 4)}\n                />\n\n                <H1>Generate</H1>\n                <Button icon=\"chevron-right\" intent={\"primary\"} text={\"Generate\"} onClick={() => this.generate()} />\n                <Checkbox label={'Pretty print'} onChange={() => this.setState({pretty: !this.state.pretty})} checked={this.state.pretty}/>\n\n                <Collapse isOpen={!!this.state.output}>\n                    {\n                        this.state.pretty\n                            ? <Pre>{JSON.stringify(this.state.output, undefined, 4)}</Pre>\n                            : <TextArea large={true} fill={true} value={JSON.stringify(this.state.output)}/>\n                    }\n                </Collapse>\n            </div>\n        );\n    }\n\n    log(logMessage) {\n        this.setState({logMessage});\n    }\n\n    generate() {\n        this.carI = 0;\n        let output = {\n            time_steps: 1,\n            junctions: [],\n            roads: [],\n            cars: []\n        };\n        const params = this.state.params;\n\n        for (let x = 0; x < params.gridWidth; x++) {\n            for (let y = 0; y < params.gridHeight; y++) {\n                const junction = {\n                    id: y * params.gridWidth + x,\n                    x: x * params.gridSize,\n                    y: y * params.gridSize,\n                    signals: []\n                };\n\n                for (let i = 0; i < getNumberInRange(params['signalCountMin'], params['signalCountMax'], true); i++) {\n                    junction.signals.push({\n                        dir: getNumberInRange(0, 3, true),\n                        time: getNumberInRange(params['signalTimeMin'], params['signalTimeMax'], true)\n                    })\n                }\n\n                output.junctions.push(junction);\n\n                if (x < params.gridWidth - 1) {\n                    // If not on right edge, connect one street to junction below and one street to junction to the right\n                    const lanes = getNumberInRange(params['lanesPerRoadMin'], params['lanesPerRoadMax'], true);\n                    output.roads.push({\n                        junction1: y * params.gridWidth + x,\n                        junction2: y * params.gridWidth + x + 1,\n                        lanes: lanes,\n                        limit: getNumberInRange(params['limitMin'], params['limitMax'], true)\n                    });\n                    this.generateCars(car => output.cars.push(car), y * params.gridWidth + x, y * params.gridWidth + x + 1, lanes);\n                }\n                if (y < params.gridHeight - 1) {\n                    // If not on bottom edge, connect one street to junction below and one street to junction to the right\n                    const lanes = getNumberInRange(params['lanesPerRoadMin'], params['lanesPerRoadMax'], true);\n                    output.roads.push({\n                        junction1: y * params.gridWidth + x,\n                        junction2: y * params.gridWidth + x + params.gridWidth,\n                        lanes: lanes,\n                        limit: getNumberInRange(params['limitMin'], params['limitMax'], true)\n                    });\n                    this.generateCars(car => output.cars.push(car), y * params.gridWidth + x, y * params.gridWidth + x + params.gridWidth, lanes);\n                }\n            }\n        }\n\n        this.setState({ output });\n    }\n\n    generateCars(add, from, to, lanes) {\n        const params = this.state.params;\n\n        for (let i = 0; i < getNumberInRange(params['carsPerRoadMin'], params['carsPerRoadMax'], true); i++) {\n            const route = [];\n            for (let j = 0; j < getNumberInRange(params['routeLengthMin'], params['routeLengthMax'], true); j++) {\n                route.push(getNumberInRange(0, 3, true));\n            }\n\n            add({\n                id: this.carI++,\n                target_velocity: getNumberInRange(params['targetVelocityMin'], params['targetVelocityMax'], true),\n                max_acceleration: getNumberInRange(params['maxAccelerationMin'], params['maxAccelerationMax'], true),\n                target_deceleration: getNumberInRange(params['targetDecelerationMin'], params['targetDecelerationMax'], true),\n                min_distance: getNumberInRange(params['minDistanceMin'], params['minDistanceMax'], true),\n                target_headway: getNumberInRange(params['targetHeadwayMin'], params['targetHeadwayMax'], true),\n                politeness: getNumberInRange(params['politenessMin'], params['politenessMax'], false),\n                start: {\n                    from, to,\n                    lane: getNumberInRange(0, lanes - 1, true),\n                    distance: getNumberInRange(0, params.gridSize - 35 / 2, false) // TODO?\n                },\n                route\n            });\n        }\n    }\n}\n\nfunction getNumberInRange(min, max, round) {\n    if (round) {\n        min = Math.ceil(min);\n        max = Math.floor(max);\n        return Math.floor(Math.random() * (max - min + 1)) + min;\n    } else {\n        return Math.random() * (max - min) + min;\n    }\n}\n\n\nfunction NumberInput(props) {\n    return (\n        <FormGroup\n            label={props.label}\n            labelInfo={props.info}\n            labelFor={props.id}\n        >\n            <NumericInput\n                id={props.id}\n                placeholder={props.placeholder}\n                min={props.min}\n                stepSize={props.stepSize}\n                max={props.max}\n                value={props.state[props.id]}\n                onValueChange={number => props.onChange(props.id, number)}\n            />\n        </FormGroup>\n    );\n}\n\nfunction RangeInput(props) {\n    const [min, max] = [props.state[props.id + 'Min'] || props.min, props.state[props.id + 'Max'] || props.max];\n    return (\n        <FormGroup\n            label={props.label}\n            labelInfo={props.info}\n            labelFor={props.id}\n        >\n            <RangeSlider\n                id={props.id}\n                value={[min, max]}\n                stepSize={props.stepSize}\n                labelStepSize={(props.max - props.min) / props.stepSize < 15 ? props.stepSize : (props.max - props.min) / 20}\n                min={props.min}\n                max={props.max}\n                onChange={value => {\n                    props.onChange(props.id + 'Min', value[0]);\n                    props.onChange(props.id + 'Max', value[1]);\n                }}\n            />\n        </FormGroup>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}